# Generated from qasm.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,240,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,
        7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,
        1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
        1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,4,29,171,8,29,11,29,12,29,172,
        1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,4,30,190,8,30,11,30,12,30,191,1,30,1,30,5,30,196,8,30,
        10,30,12,30,199,9,30,1,30,1,30,1,30,1,31,1,31,5,31,206,8,31,10,31,
        12,31,209,9,31,1,32,4,32,212,8,32,11,32,12,32,213,1,33,1,33,1,33,
        1,34,1,34,1,34,1,34,1,35,4,35,224,8,35,11,35,12,35,225,1,35,1,35,
        1,36,1,36,1,36,1,36,5,36,234,8,36,10,36,12,36,237,9,36,1,36,1,36,
        1,197,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,246,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,80,1,0,0,0,5,82,1,0,0,0,7,84,
        1,0,0,0,9,86,1,0,0,0,11,91,1,0,0,0,13,94,1,0,0,0,15,96,1,0,0,0,17,
        98,1,0,0,0,19,100,1,0,0,0,21,104,1,0,0,0,23,106,1,0,0,0,25,108,1,
        0,0,0,27,112,1,0,0,0,29,117,1,0,0,0,31,119,1,0,0,0,33,122,1,0,0,
        0,35,125,1,0,0,0,37,128,1,0,0,0,39,130,1,0,0,0,41,132,1,0,0,0,43,
        135,1,0,0,0,45,138,1,0,0,0,47,141,1,0,0,0,49,149,1,0,0,0,51,152,
        1,0,0,0,53,154,1,0,0,0,55,156,1,0,0,0,57,158,1,0,0,0,59,160,1,0,
        0,0,61,180,1,0,0,0,63,203,1,0,0,0,65,211,1,0,0,0,67,215,1,0,0,0,
        69,218,1,0,0,0,71,223,1,0,0,0,73,229,1,0,0,0,75,76,5,113,0,0,76,
        77,5,114,0,0,77,78,5,101,0,0,78,79,5,103,0,0,79,2,1,0,0,0,80,81,
        5,91,0,0,81,4,1,0,0,0,82,83,5,93,0,0,83,6,1,0,0,0,84,85,5,59,0,0,
        85,8,1,0,0,0,86,87,5,99,0,0,87,88,5,114,0,0,88,89,5,101,0,0,89,90,
        5,103,0,0,90,10,1,0,0,0,91,92,5,105,0,0,92,93,5,100,0,0,93,12,1,
        0,0,0,94,95,5,120,0,0,95,14,1,0,0,0,96,97,5,122,0,0,97,16,1,0,0,
        0,98,99,5,115,0,0,99,18,1,0,0,0,100,101,5,115,0,0,101,102,5,100,
        0,0,102,103,5,103,0,0,103,20,1,0,0,0,104,105,5,104,0,0,105,22,1,
        0,0,0,106,107,5,116,0,0,107,24,1,0,0,0,108,109,5,116,0,0,109,110,
        5,100,0,0,110,111,5,103,0,0,111,26,1,0,0,0,112,113,5,115,0,0,113,
        114,5,119,0,0,114,115,5,97,0,0,115,116,5,112,0,0,116,28,1,0,0,0,
        117,118,5,44,0,0,118,30,1,0,0,0,119,120,5,99,0,0,120,121,5,120,0,
        0,121,32,1,0,0,0,122,123,5,99,0,0,123,124,5,122,0,0,124,34,1,0,0,
        0,125,126,5,114,0,0,126,127,5,120,0,0,127,36,1,0,0,0,128,129,5,40,
        0,0,129,38,1,0,0,0,130,131,5,41,0,0,131,40,1,0,0,0,132,133,5,114,
        0,0,133,134,5,121,0,0,134,42,1,0,0,0,135,136,5,114,0,0,136,137,5,
        122,0,0,137,44,1,0,0,0,138,139,5,117,0,0,139,140,5,51,0,0,140,46,
        1,0,0,0,141,142,5,109,0,0,142,143,5,101,0,0,143,144,5,97,0,0,144,
        145,5,115,0,0,145,146,5,117,0,0,146,147,5,114,0,0,147,148,5,101,
        0,0,148,48,1,0,0,0,149,150,5,45,0,0,150,151,5,62,0,0,151,50,1,0,
        0,0,152,153,5,42,0,0,153,52,1,0,0,0,154,155,5,47,0,0,155,54,1,0,
        0,0,156,157,5,43,0,0,157,56,1,0,0,0,158,159,5,45,0,0,159,58,1,0,
        0,0,160,161,5,79,0,0,161,162,5,80,0,0,162,163,5,69,0,0,163,164,5,
        78,0,0,164,165,5,81,0,0,165,166,5,65,0,0,166,167,5,83,0,0,167,168,
        5,77,0,0,168,170,1,0,0,0,169,171,3,71,35,0,170,169,1,0,0,0,171,172,
        1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,
        5,50,0,0,175,176,5,46,0,0,176,177,5,48,0,0,177,178,1,0,0,0,178,179,
        5,59,0,0,179,60,1,0,0,0,180,181,5,105,0,0,181,182,5,110,0,0,182,
        183,5,99,0,0,183,184,5,108,0,0,184,185,5,117,0,0,185,186,5,100,0,
        0,186,187,5,101,0,0,187,189,1,0,0,0,188,190,3,71,35,0,189,188,1,
        0,0,0,190,191,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,193,1,
        0,0,0,193,197,5,34,0,0,194,196,9,0,0,0,195,194,1,0,0,0,196,199,1,
        0,0,0,197,198,1,0,0,0,197,195,1,0,0,0,198,200,1,0,0,0,199,197,1,
        0,0,0,200,201,5,34,0,0,201,202,5,59,0,0,202,62,1,0,0,0,203,207,7,
        0,0,0,204,206,7,1,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,
        0,0,0,207,208,1,0,0,0,208,64,1,0,0,0,209,207,1,0,0,0,210,212,7,2,
        0,0,211,210,1,0,0,0,212,213,1,0,0,0,213,211,1,0,0,0,213,214,1,0,
        0,0,214,66,1,0,0,0,215,216,5,112,0,0,216,217,5,105,0,0,217,68,1,
        0,0,0,218,219,3,65,32,0,219,220,5,46,0,0,220,221,3,65,32,0,221,70,
        1,0,0,0,222,224,7,3,0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,
        1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,228,6,35,0,0,228,72,
        1,0,0,0,229,230,5,47,0,0,230,231,5,47,0,0,231,235,1,0,0,0,232,234,
        8,4,0,0,233,232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,
        1,0,0,0,236,238,1,0,0,0,237,235,1,0,0,0,238,239,6,36,0,0,239,74,
        1,0,0,0,8,0,172,191,197,207,213,225,235,1,6,0,0
    ]

class qasmLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    OPENQASM = 30
    INCLUDE = 31
    ID = 32
    INT = 33
    PI = 34
    FLOAT = 35
    WS = 36
    LINE_COMMENT = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'qreg'", "'['", "']'", "';'", "'creg'", "'id'", "'x'", "'z'", 
            "'s'", "'sdg'", "'h'", "'t'", "'tdg'", "'swap'", "','", "'cx'", 
            "'cz'", "'rx'", "'('", "')'", "'ry'", "'rz'", "'u3'", "'measure'", 
            "'->'", "'*'", "'/'", "'+'", "'-'", "'pi'" ]

    symbolicNames = [ "<INVALID>",
            "OPENQASM", "INCLUDE", "ID", "INT", "PI", "FLOAT", "WS", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "OPENQASM", "INCLUDE", "ID", 
                  "INT", "PI", "FLOAT", "WS", "LINE_COMMENT" ]

    grammarFileName = "qasm.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



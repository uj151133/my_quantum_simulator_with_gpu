
// Generated from OpenQASM3.g4 by ANTLR 4.13.2


#include "OpenQASM3Lexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct OpenQASM3LexerStaticData final {
  OpenQASM3LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  OpenQASM3LexerStaticData(const OpenQASM3LexerStaticData&) = delete;
  OpenQASM3LexerStaticData(OpenQASM3LexerStaticData&&) = delete;
  OpenQASM3LexerStaticData& operator=(const OpenQASM3LexerStaticData&) = delete;
  OpenQASM3LexerStaticData& operator=(OpenQASM3LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag openqasm3lexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<OpenQASM3LexerStaticData> openqasm3lexerLexerStaticData = nullptr;

void openqasm3lexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (openqasm3lexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(openqasm3lexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<OpenQASM3LexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "GPHASE", "ID", "P", "X", "Y", "Z", "SX", "H", "S", 
      "SDG", "T", "TDG", "RX", "RY", "RZ", "CX", "CY", "CZ", "CP", "CRX", 
      "CRY", "CRZ", "CH", "CU", "SWAP", "CCX", "CSWAP", "U1", "U2", "U3", 
      "RESET", "BARRIER", "MEASURE", "NUMBER", "IDSTR", "STRING", "LBRACKET", 
      "RBRACKET", "LPAREN", "RPAREN", "COMMA", "SEMICOLON", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'OPENQASM'", "'.'", "'include'", "'qreg'", "'creg'", "'pi'", 
      "'+'", "'-'", "'*'", "'/'", "'->'", "'gphase'", "'id'", "", "'x'", 
      "'y'", "'z'", "'sx'", "'h'", "'s'", "'sdg'", "'t'", "'tdg'", "'rx'", 
      "'ry'", "'rz'", "", "'cy'", "'cz'", "", "'crx'", "'cry'", "'crz'", 
      "'ch'", "'cu'", "'swap'", "'ccx'", "'cswap'", "'u1'", "'u2'", "'u3'", 
      "'reset'", "'barrier'", "'measure'", "", "", "", "'['", "']'", "'('", 
      "')'", "','", "';'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "GPHASE", "ID", "P", 
      "X", "Y", "Z", "SX", "H", "S", "SDG", "T", "TDG", "RX", "RY", "RZ", 
      "CX", "CY", "CZ", "CP", "CRX", "CRY", "CRZ", "CH", "CU", "SWAP", "CCX", 
      "CSWAP", "U1", "U2", "U3", "RESET", "BARRIER", "MEASURE", "NUMBER", 
      "IDSTR", "STRING", "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", "COMMA", 
      "SEMICOLON", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,54,328,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
  	3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
  	1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
  	1,13,1,13,1,13,1,13,3,13,169,8,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
  	1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,
  	1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,
  	1,26,3,26,207,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,3,29,223,8,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
  	1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
  	1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,
  	1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,
  	1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
  	1,43,1,44,4,44,290,8,44,11,44,12,44,291,1,45,1,45,5,45,296,8,45,10,45,
  	12,45,299,9,45,1,46,1,46,5,46,303,8,46,10,46,12,46,306,9,46,1,46,1,46,
  	1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,4,53,
  	323,8,53,11,53,12,53,324,1,53,1,53,0,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,
  	7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
  	19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
  	61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
  	42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
  	53,107,54,1,0,5,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
  	97,122,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,334,0,1,1,0,0,0,0,3,
  	1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
  	0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
  	1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
  	0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
  	0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
  	1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
  	0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
  	0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
  	1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
  	0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,1,109,1,0,
  	0,0,3,118,1,0,0,0,5,120,1,0,0,0,7,128,1,0,0,0,9,133,1,0,0,0,11,138,1,
  	0,0,0,13,141,1,0,0,0,15,143,1,0,0,0,17,145,1,0,0,0,19,147,1,0,0,0,21,
  	149,1,0,0,0,23,152,1,0,0,0,25,159,1,0,0,0,27,168,1,0,0,0,29,170,1,0,0,
  	0,31,172,1,0,0,0,33,174,1,0,0,0,35,176,1,0,0,0,37,179,1,0,0,0,39,181,
  	1,0,0,0,41,183,1,0,0,0,43,187,1,0,0,0,45,189,1,0,0,0,47,193,1,0,0,0,49,
  	196,1,0,0,0,51,199,1,0,0,0,53,206,1,0,0,0,55,208,1,0,0,0,57,211,1,0,0,
  	0,59,222,1,0,0,0,61,224,1,0,0,0,63,228,1,0,0,0,65,232,1,0,0,0,67,236,
  	1,0,0,0,69,239,1,0,0,0,71,242,1,0,0,0,73,247,1,0,0,0,75,251,1,0,0,0,77,
  	257,1,0,0,0,79,260,1,0,0,0,81,263,1,0,0,0,83,266,1,0,0,0,85,272,1,0,0,
  	0,87,280,1,0,0,0,89,289,1,0,0,0,91,293,1,0,0,0,93,300,1,0,0,0,95,309,
  	1,0,0,0,97,311,1,0,0,0,99,313,1,0,0,0,101,315,1,0,0,0,103,317,1,0,0,0,
  	105,319,1,0,0,0,107,322,1,0,0,0,109,110,5,79,0,0,110,111,5,80,0,0,111,
  	112,5,69,0,0,112,113,5,78,0,0,113,114,5,81,0,0,114,115,5,65,0,0,115,116,
  	5,83,0,0,116,117,5,77,0,0,117,2,1,0,0,0,118,119,5,46,0,0,119,4,1,0,0,
  	0,120,121,5,105,0,0,121,122,5,110,0,0,122,123,5,99,0,0,123,124,5,108,
  	0,0,124,125,5,117,0,0,125,126,5,100,0,0,126,127,5,101,0,0,127,6,1,0,0,
  	0,128,129,5,113,0,0,129,130,5,114,0,0,130,131,5,101,0,0,131,132,5,103,
  	0,0,132,8,1,0,0,0,133,134,5,99,0,0,134,135,5,114,0,0,135,136,5,101,0,
  	0,136,137,5,103,0,0,137,10,1,0,0,0,138,139,5,112,0,0,139,140,5,105,0,
  	0,140,12,1,0,0,0,141,142,5,43,0,0,142,14,1,0,0,0,143,144,5,45,0,0,144,
  	16,1,0,0,0,145,146,5,42,0,0,146,18,1,0,0,0,147,148,5,47,0,0,148,20,1,
  	0,0,0,149,150,5,45,0,0,150,151,5,62,0,0,151,22,1,0,0,0,152,153,5,103,
  	0,0,153,154,5,112,0,0,154,155,5,104,0,0,155,156,5,97,0,0,156,157,5,115,
  	0,0,157,158,5,101,0,0,158,24,1,0,0,0,159,160,5,105,0,0,160,161,5,100,
  	0,0,161,26,1,0,0,0,162,169,5,112,0,0,163,164,5,112,0,0,164,165,5,104,
  	0,0,165,166,5,97,0,0,166,167,5,115,0,0,167,169,5,101,0,0,168,162,1,0,
  	0,0,168,163,1,0,0,0,169,28,1,0,0,0,170,171,5,120,0,0,171,30,1,0,0,0,172,
  	173,5,121,0,0,173,32,1,0,0,0,174,175,5,122,0,0,175,34,1,0,0,0,176,177,
  	5,115,0,0,177,178,5,120,0,0,178,36,1,0,0,0,179,180,5,104,0,0,180,38,1,
  	0,0,0,181,182,5,115,0,0,182,40,1,0,0,0,183,184,5,115,0,0,184,185,5,100,
  	0,0,185,186,5,103,0,0,186,42,1,0,0,0,187,188,5,116,0,0,188,44,1,0,0,0,
  	189,190,5,116,0,0,190,191,5,100,0,0,191,192,5,103,0,0,192,46,1,0,0,0,
  	193,194,5,114,0,0,194,195,5,120,0,0,195,48,1,0,0,0,196,197,5,114,0,0,
  	197,198,5,121,0,0,198,50,1,0,0,0,199,200,5,114,0,0,200,201,5,122,0,0,
  	201,52,1,0,0,0,202,203,5,99,0,0,203,207,5,120,0,0,204,205,5,67,0,0,205,
  	207,5,88,0,0,206,202,1,0,0,0,206,204,1,0,0,0,207,54,1,0,0,0,208,209,5,
  	99,0,0,209,210,5,121,0,0,210,56,1,0,0,0,211,212,5,99,0,0,212,213,5,122,
  	0,0,213,58,1,0,0,0,214,215,5,99,0,0,215,223,5,112,0,0,216,217,5,99,0,
  	0,217,218,5,112,0,0,218,219,5,104,0,0,219,220,5,97,0,0,220,221,5,115,
  	0,0,221,223,5,101,0,0,222,214,1,0,0,0,222,216,1,0,0,0,223,60,1,0,0,0,
  	224,225,5,99,0,0,225,226,5,114,0,0,226,227,5,120,0,0,227,62,1,0,0,0,228,
  	229,5,99,0,0,229,230,5,114,0,0,230,231,5,121,0,0,231,64,1,0,0,0,232,233,
  	5,99,0,0,233,234,5,114,0,0,234,235,5,122,0,0,235,66,1,0,0,0,236,237,5,
  	99,0,0,237,238,5,104,0,0,238,68,1,0,0,0,239,240,5,99,0,0,240,241,5,117,
  	0,0,241,70,1,0,0,0,242,243,5,115,0,0,243,244,5,119,0,0,244,245,5,97,0,
  	0,245,246,5,112,0,0,246,72,1,0,0,0,247,248,5,99,0,0,248,249,5,99,0,0,
  	249,250,5,120,0,0,250,74,1,0,0,0,251,252,5,99,0,0,252,253,5,115,0,0,253,
  	254,5,119,0,0,254,255,5,97,0,0,255,256,5,112,0,0,256,76,1,0,0,0,257,258,
  	5,117,0,0,258,259,5,49,0,0,259,78,1,0,0,0,260,261,5,117,0,0,261,262,5,
  	50,0,0,262,80,1,0,0,0,263,264,5,117,0,0,264,265,5,51,0,0,265,82,1,0,0,
  	0,266,267,5,114,0,0,267,268,5,101,0,0,268,269,5,115,0,0,269,270,5,101,
  	0,0,270,271,5,116,0,0,271,84,1,0,0,0,272,273,5,98,0,0,273,274,5,97,0,
  	0,274,275,5,114,0,0,275,276,5,114,0,0,276,277,5,105,0,0,277,278,5,101,
  	0,0,278,279,5,114,0,0,279,86,1,0,0,0,280,281,5,109,0,0,281,282,5,101,
  	0,0,282,283,5,97,0,0,283,284,5,115,0,0,284,285,5,117,0,0,285,286,5,114,
  	0,0,286,287,5,101,0,0,287,88,1,0,0,0,288,290,7,0,0,0,289,288,1,0,0,0,
  	290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,90,1,0,0,0,293,297,
  	7,1,0,0,294,296,7,2,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,
  	0,297,298,1,0,0,0,298,92,1,0,0,0,299,297,1,0,0,0,300,304,5,34,0,0,301,
  	303,8,3,0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,
  	0,0,0,305,307,1,0,0,0,306,304,1,0,0,0,307,308,5,34,0,0,308,94,1,0,0,0,
  	309,310,5,91,0,0,310,96,1,0,0,0,311,312,5,93,0,0,312,98,1,0,0,0,313,314,
  	5,40,0,0,314,100,1,0,0,0,315,316,5,41,0,0,316,102,1,0,0,0,317,318,5,44,
  	0,0,318,104,1,0,0,0,319,320,5,59,0,0,320,106,1,0,0,0,321,323,7,4,0,0,
  	322,321,1,0,0,0,323,324,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,326,
  	1,0,0,0,326,327,6,53,0,0,327,108,1,0,0,0,8,0,168,206,222,291,297,304,
  	324,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  openqasm3lexerLexerStaticData = std::move(staticData);
}

}

OpenQASM3Lexer::OpenQASM3Lexer(CharStream *input) : Lexer(input) {
  OpenQASM3Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *openqasm3lexerLexerStaticData->atn, openqasm3lexerLexerStaticData->decisionToDFA, openqasm3lexerLexerStaticData->sharedContextCache);
}

OpenQASM3Lexer::~OpenQASM3Lexer() {
  delete _interpreter;
}

std::string OpenQASM3Lexer::getGrammarFileName() const {
  return "OpenQASM3.g4";
}

const std::vector<std::string>& OpenQASM3Lexer::getRuleNames() const {
  return openqasm3lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& OpenQASM3Lexer::getChannelNames() const {
  return openqasm3lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& OpenQASM3Lexer::getModeNames() const {
  return openqasm3lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& OpenQASM3Lexer::getVocabulary() const {
  return openqasm3lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView OpenQASM3Lexer::getSerializedATN() const {
  return openqasm3lexerLexerStaticData->serializedATN;
}

const atn::ATN& OpenQASM3Lexer::getATN() const {
  return *openqasm3lexerLexerStaticData->atn;
}




void OpenQASM3Lexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  openqasm3lexerLexerInitialize();
#else
  ::antlr4::internal::call_once(openqasm3lexerLexerOnceFlag, openqasm3lexerLexerInitialize);
#endif
}

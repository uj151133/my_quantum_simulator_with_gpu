#include "dnnN2.hpp"

void dnnN2() {
    QuantumCircuit q(2);
    vector<int> ans(2);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 1.1);
    q.addRz(1, M_PI * 1.1);
    q.addU3(0, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(1, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(1, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(0, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(1, 0, 0, M_PI * 0.5);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(1, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(0, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 1.1);
    q.addRz(0, M_PI * 1.1);
    q.addU3(1, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(0, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(1, 0);
    q.addCX(0, 1);
    q.addRz(0, M_PI * 0.5);
    q.addCX(1, 0);
    q.addU3(1, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(0, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(1, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(0, 0, 0, M_PI * 0.5);
    q.addCX(1, 0);
    q.addCX(0, 1);
    q.addRz(0, M_PI * 0.5);
    q.addCX(1, 0);
    q.addU3(1, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(0, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(1, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(1, 0);
    q.addCX(0, 1);
    q.addRz(0, M_PI * 0.5);
    q.addCX(1, 0);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 0.3501408748);
    q.addU3(0, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(1, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(1, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(0, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(1, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(1, M_PI * 0.5, M_PI * 1.8, 0);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 1.1);
    q.addRz(1, M_PI * 1.1);
    q.addU3(0, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(1, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(1, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(0, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(1, 0, 0, M_PI * 0.5);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(1, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(0, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 1.1);
    q.addRz(0, M_PI * 1.1);
    q.addU3(1, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(0, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(1, 0);
    q.addCX(0, 1);
    q.addRz(0, M_PI * 0.5);
    q.addCX(1, 0);
    q.addU3(1, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(0, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(1, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(0, 0, 0, M_PI * 0.5);
    q.addCX(1, 0);
    q.addCX(0, 1);
    q.addRz(0, M_PI * 0.5);
    q.addCX(1, 0);
    q.addU3(1, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(0, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(1, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(1, 0);
    q.addCX(0, 1);
    q.addRz(0, M_PI * 0.5);
    q.addCX(1, 0);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 0.3501408748);
    ans[0] = q.read(0);
    ans[1] = q.read(1);
    return;
}

#include "dnnN8.hpp"

void dnnN8() {
    QuantumCircuit q(8);
    vector<int> ans(8);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 1.1);
    q.addRz(1, M_PI * 1.1);
    q.addU3(0, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(1, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(1, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(0, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(1, 0, 0, M_PI * 0.5);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(1, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(0, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(2, M_PI * 0.3501408748);
    q.addRz(3, M_PI * 0.3501408748);
    q.addRz(2, M_PI * 1.1);
    q.addRz(3, M_PI * 1.1);
    q.addU3(2, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(3, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(2, 3);
    q.addCX(3, 2);
    q.addRz(3, M_PI * 0.5);
    q.addCX(2, 3);
    q.addU3(2, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(3, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(2, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(3, 0, 0, M_PI * 0.5);
    q.addCX(2, 3);
    q.addCX(3, 2);
    q.addRz(3, M_PI * 0.5);
    q.addCX(2, 3);
    q.addU3(2, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(3, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(2, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(3, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(2, 3);
    q.addCX(3, 2);
    q.addRz(3, M_PI * 0.5);
    q.addCX(2, 3);
    q.addU3(2, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(3, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(2, M_PI * 0.3501408748);
    q.addRz(3, M_PI * 0.3501408748);
    q.addRz(4, M_PI * 0.3501408748);
    q.addRz(5, M_PI * 0.3501408748);
    q.addRz(4, M_PI * 1.1);
    q.addRz(5, M_PI * 1.1);
    q.addU3(4, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(5, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(4, 5);
    q.addCX(5, 4);
    q.addRz(5, M_PI * 0.5);
    q.addCX(4, 5);
    q.addU3(4, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(5, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(4, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(5, 0, 0, M_PI * 0.5);
    q.addCX(4, 5);
    q.addCX(5, 4);
    q.addRz(5, M_PI * 0.5);
    q.addCX(4, 5);
    q.addU3(4, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(5, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(4, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(5, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(4, 5);
    q.addCX(5, 4);
    q.addRz(5, M_PI * 0.5);
    q.addCX(4, 5);
    q.addU3(4, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(5, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(4, M_PI * 0.3501408748);
    q.addRz(5, M_PI * 0.3501408748);
    q.addRz(6, M_PI * 0.3501408748);
    q.addRz(7, M_PI * 0.3501408748);
    q.addRz(6, M_PI * 1.1);
    q.addRz(7, M_PI * 1.1);
    q.addU3(6, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(7, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(6, 7);
    q.addCX(7, 6);
    q.addRz(7, M_PI * 0.5);
    q.addCX(6, 7);
    q.addU3(6, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(7, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(6, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(7, 0, 0, M_PI * 0.5);
    q.addCX(6, 7);
    q.addCX(7, 6);
    q.addRz(7, M_PI * 0.5);
    q.addCX(6, 7);
    q.addU3(6, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(7, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(6, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(7, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(6, 7);
    q.addCX(7, 6);
    q.addRz(7, M_PI * 0.5);
    q.addCX(6, 7);
    q.addU3(6, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(7, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(6, M_PI * 0.3501408748);
    q.addRz(7, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(2, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 1.1);
    q.addRz(2, M_PI * 1.1);
    q.addU3(1, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(2, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(1, 2);
    q.addCX(2, 1);
    q.addRz(2, M_PI * 0.5);
    q.addCX(1, 2);
    q.addU3(1, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(2, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(1, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(2, 0, 0, M_PI * 0.5);
    q.addCX(1, 2);
    q.addCX(2, 1);
    q.addRz(2, M_PI * 0.5);
    q.addCX(1, 2);
    q.addU3(1, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(2, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(1, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(2, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(1, 2);
    q.addCX(2, 1);
    q.addRz(2, M_PI * 0.5);
    q.addCX(1, 2);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(2, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(2, M_PI * 0.3501408748);
    q.addRz(3, M_PI * 0.3501408748);
    q.addRz(4, M_PI * 0.3501408748);
    q.addRz(3, M_PI * 1.1);
    q.addRz(4, M_PI * 1.1);
    q.addU3(3, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(4, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(3, 4);
    q.addCX(4, 3);
    q.addRz(4, M_PI * 0.5);
    q.addCX(3, 4);
    q.addU3(3, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(4, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(3, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(4, 0, 0, M_PI * 0.5);
    q.addCX(3, 4);
    q.addCX(4, 3);
    q.addRz(4, M_PI * 0.5);
    q.addCX(3, 4);
    q.addU3(3, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(4, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(3, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(4, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(3, 4);
    q.addCX(4, 3);
    q.addRz(4, M_PI * 0.5);
    q.addCX(3, 4);
    q.addU3(3, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(4, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(3, M_PI * 0.3501408748);
    q.addRz(4, M_PI * 0.3501408748);
    q.addRz(5, M_PI * 0.3501408748);
    q.addRz(6, M_PI * 0.3501408748);
    q.addRz(5, M_PI * 1.1);
    q.addRz(6, M_PI * 1.1);
    q.addU3(5, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(6, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(5, 6);
    q.addCX(6, 5);
    q.addRz(6, M_PI * 0.5);
    q.addCX(5, 6);
    q.addU3(5, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(6, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(5, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(6, 0, 0, M_PI * 0.5);
    q.addCX(5, 6);
    q.addCX(6, 5);
    q.addRz(6, M_PI * 0.5);
    q.addCX(5, 6);
    q.addU3(5, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(6, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(5, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(6, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(5, 6);
    q.addCX(6, 5);
    q.addRz(6, M_PI * 0.5);
    q.addCX(5, 6);
    q.addU3(5, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(6, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(5, M_PI * 0.3501408748);
    q.addRz(6, M_PI * 0.3501408748);
    q.addRz(7, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(7, M_PI * 1.1);
    q.addRz(0, M_PI * 1.1);
    q.addU3(7, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(0, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(7, 0);
    q.addCX(0, 7);
    q.addRz(0, M_PI * 0.5);
    q.addCX(7, 0);
    q.addU3(7, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(0, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(7, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(0, 0, 0, M_PI * 0.5);
    q.addCX(7, 0);
    q.addCX(0, 7);
    q.addRz(0, M_PI * 0.5);
    q.addCX(7, 0);
    q.addU3(7, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(0, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(7, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(7, 0);
    q.addCX(0, 7);
    q.addRz(0, M_PI * 0.5);
    q.addCX(7, 0);
    q.addU3(7, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(7, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 0.3501408748);
    q.addU3(0, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(1, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(1, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(2, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(3, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(2, 3);
    q.addCX(3, 2);
    q.addRz(3, M_PI * 0.5);
    q.addCX(2, 3);
    q.addU3(2, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(3, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(4, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(5, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(4, 5);
    q.addCX(5, 4);
    q.addRz(5, M_PI * 0.5);
    q.addCX(4, 5);
    q.addU3(4, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(5, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(6, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(7, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(6, 7);
    q.addCX(7, 6);
    q.addRz(7, M_PI * 0.5);
    q.addCX(6, 7);
    q.addU3(6, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(7, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(0, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(1, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(1, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(2, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(3, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(2, 3);
    q.addCX(3, 2);
    q.addRz(3, M_PI * 0.5);
    q.addCX(2, 3);
    q.addU3(2, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(3, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(4, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(5, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(4, 5);
    q.addCX(5, 4);
    q.addRz(5, M_PI * 0.5);
    q.addCX(4, 5);
    q.addU3(4, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(5, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(6, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(7, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(6, 7);
    q.addCX(7, 6);
    q.addRz(7, M_PI * 0.5);
    q.addCX(6, 7);
    q.addU3(6, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(7, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(1, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(2, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(1, 2);
    q.addCX(2, 1);
    q.addRz(2, M_PI * 0.5);
    q.addCX(1, 2);
    q.addU3(1, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(2, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(3, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(4, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(3, 4);
    q.addCX(4, 3);
    q.addRz(4, M_PI * 0.5);
    q.addCX(3, 4);
    q.addU3(3, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(4, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(5, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(6, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(5, 6);
    q.addCX(6, 5);
    q.addRz(6, M_PI * 0.5);
    q.addCX(5, 6);
    q.addU3(5, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(6, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(7, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(0, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(7, 0);
    q.addCX(0, 7);
    q.addRz(0, M_PI * 0.5);
    q.addCX(7, 0);
    q.addU3(7, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(0, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(1, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(2, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(1, 2);
    q.addCX(2, 1);
    q.addRz(2, M_PI * 0.5);
    q.addCX(1, 2);
    q.addU3(1, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(2, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(3, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(4, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(3, 4);
    q.addCX(4, 3);
    q.addRz(4, M_PI * 0.5);
    q.addCX(3, 4);
    q.addU3(3, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(4, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(5, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(6, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(5, 6);
    q.addCX(6, 5);
    q.addRz(6, M_PI * 0.5);
    q.addCX(5, 6);
    q.addU3(5, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(6, M_PI * 0.5, M_PI * 1.8, 0);
    q.addU3(7, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(0, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(7, 0);
    q.addCX(0, 7);
    q.addRz(0, M_PI * 0.5);
    q.addCX(7, 0);
    q.addU3(7, M_PI * 0.5, M_PI * 0.3, M_PI * 1.0);
    q.addU3(0, M_PI * 0.5, M_PI * 1.8, 0);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 1.1);
    q.addRz(1, M_PI * 1.1);
    q.addU3(0, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(1, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(1, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(0, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(1, 0, 0, M_PI * 0.5);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(1, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(0, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(0, 1);
    q.addCX(1, 0);
    q.addRz(1, M_PI * 0.5);
    q.addCX(0, 1);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(2, M_PI * 0.3501408748);
    q.addRz(3, M_PI * 0.3501408748);
    q.addRz(2, M_PI * 1.1);
    q.addRz(3, M_PI * 1.1);
    q.addU3(2, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(3, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(2, 3);
    q.addCX(3, 2);
    q.addRz(3, M_PI * 0.5);
    q.addCX(2, 3);
    q.addU3(2, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(3, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(2, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(3, 0, 0, M_PI * 0.5);
    q.addCX(2, 3);
    q.addCX(3, 2);
    q.addRz(3, M_PI * 0.5);
    q.addCX(2, 3);
    q.addU3(2, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(3, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(2, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(3, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(2, 3);
    q.addCX(3, 2);
    q.addRz(3, M_PI * 0.5);
    q.addCX(2, 3);
    q.addU3(2, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(3, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(2, M_PI * 0.3501408748);
    q.addRz(3, M_PI * 0.3501408748);
    q.addRz(4, M_PI * 0.3501408748);
    q.addRz(5, M_PI * 0.3501408748);
    q.addRz(4, M_PI * 1.1);
    q.addRz(5, M_PI * 1.1);
    q.addU3(4, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(5, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(4, 5);
    q.addCX(5, 4);
    q.addRz(5, M_PI * 0.5);
    q.addCX(4, 5);
    q.addU3(4, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(5, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(4, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(5, 0, 0, M_PI * 0.5);
    q.addCX(4, 5);
    q.addCX(5, 4);
    q.addRz(5, M_PI * 0.5);
    q.addCX(4, 5);
    q.addU3(4, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(5, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(4, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(5, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(4, 5);
    q.addCX(5, 4);
    q.addRz(5, M_PI * 0.5);
    q.addCX(4, 5);
    q.addU3(4, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(5, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(4, M_PI * 0.3501408748);
    q.addRz(5, M_PI * 0.3501408748);
    q.addRz(6, M_PI * 0.3501408748);
    q.addRz(7, M_PI * 0.3501408748);
    q.addRz(6, M_PI * 1.1);
    q.addRz(7, M_PI * 1.1);
    q.addU3(6, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(7, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(6, 7);
    q.addCX(7, 6);
    q.addRz(7, M_PI * 0.5);
    q.addCX(6, 7);
    q.addU3(6, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(7, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(6, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(7, 0, 0, M_PI * 0.5);
    q.addCX(6, 7);
    q.addCX(7, 6);
    q.addRz(7, M_PI * 0.5);
    q.addCX(6, 7);
    q.addU3(6, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(7, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(6, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(7, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(6, 7);
    q.addCX(7, 6);
    q.addRz(7, M_PI * 0.5);
    q.addCX(6, 7);
    q.addU3(6, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(7, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(6, M_PI * 0.3501408748);
    q.addRz(7, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(2, M_PI * 0.3501408748);
    q.addRz(1, M_PI * 1.1);
    q.addRz(2, M_PI * 1.1);
    q.addU3(1, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(2, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(1, 2);
    q.addCX(2, 1);
    q.addRz(2, M_PI * 0.5);
    q.addCX(1, 2);
    q.addU3(1, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(2, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(1, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(2, 0, 0, M_PI * 0.5);
    q.addCX(1, 2);
    q.addCX(2, 1);
    q.addRz(2, M_PI * 0.5);
    q.addCX(1, 2);
    q.addU3(1, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(2, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(1, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(2, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(1, 2);
    q.addCX(2, 1);
    q.addRz(2, M_PI * 0.5);
    q.addCX(1, 2);
    q.addU3(1, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(2, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(1, M_PI * 0.3501408748);
    q.addRz(2, M_PI * 0.3501408748);
    q.addRz(3, M_PI * 0.3501408748);
    q.addRz(4, M_PI * 0.3501408748);
    q.addRz(3, M_PI * 1.1);
    q.addRz(4, M_PI * 1.1);
    q.addU3(3, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(4, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(3, 4);
    q.addCX(4, 3);
    q.addRz(4, M_PI * 0.5);
    q.addCX(3, 4);
    q.addU3(3, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(4, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(3, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(4, 0, 0, M_PI * 0.5);
    q.addCX(3, 4);
    q.addCX(4, 3);
    q.addRz(4, M_PI * 0.5);
    q.addCX(3, 4);
    q.addU3(3, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(4, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(3, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(4, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(3, 4);
    q.addCX(4, 3);
    q.addRz(4, M_PI * 0.5);
    q.addCX(3, 4);
    q.addU3(3, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(4, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(3, M_PI * 0.3501408748);
    q.addRz(4, M_PI * 0.3501408748);
    q.addRz(5, M_PI * 0.3501408748);
    q.addRz(6, M_PI * 0.3501408748);
    q.addRz(5, M_PI * 1.1);
    q.addRz(6, M_PI * 1.1);
    q.addU3(5, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(6, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(5, 6);
    q.addCX(6, 5);
    q.addRz(6, M_PI * 0.5);
    q.addCX(5, 6);
    q.addU3(5, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(6, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(5, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(6, 0, 0, M_PI * 0.5);
    q.addCX(5, 6);
    q.addCX(6, 5);
    q.addRz(6, M_PI * 0.5);
    q.addCX(5, 6);
    q.addU3(5, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(6, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(5, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(6, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(5, 6);
    q.addCX(6, 5);
    q.addRz(6, M_PI * 0.5);
    q.addCX(5, 6);
    q.addU3(5, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(6, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(5, M_PI * 0.3501408748);
    q.addRz(6, M_PI * 0.3501408748);
    q.addRz(7, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 0.3501408748);
    q.addRz(7, M_PI * 1.1);
    q.addRz(0, M_PI * 1.1);
    q.addU3(7, M_PI * 0.5, 0, M_PI * 0.25);
    q.addU3(0, M_PI * 0.5, M_PI * 1.0, M_PI * 0.75);
    q.addCX(7, 0);
    q.addCX(0, 7);
    q.addRz(0, M_PI * 0.5);
    q.addCX(7, 0);
    q.addU3(7, M_PI * 0.5, M_PI * 0.65, M_PI * 1.0);
    q.addU3(0, M_PI * 0.5, M_PI * 0.15, 0);
    q.addU3(7, 0, M_PI * 1.0, M_PI * 0.5);
    q.addU3(0, 0, 0, M_PI * 0.5);
    q.addCX(7, 0);
    q.addCX(0, 7);
    q.addRz(0, M_PI * 0.5);
    q.addCX(7, 0);
    q.addU3(7, M_PI * 1.0, 0, M_PI * 0.5);
    q.addU3(0, M_PI * 1.0, 0, M_PI * 1.5);
    q.addU3(7, M_PI * 0.5, M_PI * 1.5, M_PI * 1.5);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addCX(7, 0);
    q.addCX(0, 7);
    q.addRz(0, M_PI * 0.5);
    q.addCX(7, 0);
    q.addU3(7, M_PI * 0.5, M_PI * 0.5, M_PI * 0.5);
    q.addU3(0, M_PI * 0.5, M_PI * 0.5, M_PI * 1.5);
    q.addRz(7, M_PI * 0.3501408748);
    q.addRz(0, M_PI * 0.3501408748);
    ans[0] = q.measure(0);
    ans[1] = q.measure(1);
    ans[2] = q.measure(2);
    ans[3] = q.measure(3);
    ans[4] = q.measure(4);
    ans[5] = q.measure(5);
    ans[6] = q.measure(6);
    ans[7] = q.measure(7);
    return;
}

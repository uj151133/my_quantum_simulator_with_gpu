#include "basisTestN4.hpp"

void basisTestN4() {
    QuantumCircuit q(4);
    vector<int> c(4);
    q.addZ(0);
    q.addZ(1);
    q.addZ(2);
    q.addZ(3);
    q.addRz(1, M_PI * 0.25);
    q.addRz(2, M_PI * -0.25);
    q.addCX(1, 2);
    q.addH(1);
    q.addCX(2, 1);
    q.addRz(1, M_PI * -0.5);
    q.addCX(2, 1);
    q.addRz(1, M_PI * 0.5);
    q.addH(1);
    q.addCX(1, 2);
    q.addRz(1, M_PI * -0.25);
    q.addRz(2, M_PI * 0.25);
    q.addRz(0, M_PI * 0.25);
    q.addRz(1, M_PI * -0.25);
    q.addCX(0, 1);
    q.addH(0);
    q.addCX(1, 0);
    q.addRz(0, M_PI * 0.0406530731);
    q.addCX(1, 0);
    q.addRz(0, M_PI * -0.0406530731);
    q.addH(0);
    q.addCX(0, 1);
    q.addRz(0, M_PI * -0.25);
    q.addRz(1, M_PI * 0.25);
    q.addRz(2, M_PI * 0.25);
    q.addRz(3, M_PI * -0.25);
    q.addCX(2, 3);
    q.addH(2);
    q.addCX(3, 2);
    q.addRz(2, M_PI * -0.0406530731);
    q.addCX(3, 2);
    q.addRz(2, M_PI * 0.0406530731);
    q.addH(2);
    q.addCX(2, 3);
    q.addRz(2, M_PI * -0.25);
    q.addRz(3, M_PI * 0.25);
    q.addRz(0, M_PI * 0.1123177385);
    q.addRz(1, M_PI * 0.25);
    q.addRz(2, M_PI * -0.25);
    q.addCX(1, 2);
    q.addH(1);
    q.addCX(2, 1);
    q.addRz(1, M_PI * -0.5);
    q.addCX(2, 1);
    q.addRz(1, M_PI * 0.5);
    q.addH(1);
    q.addCX(1, 2);
    q.addRz(1, M_PI * -0.25);
    q.addRz(2, M_PI * 0.25);
    q.addRz(1, M_PI * 0.1123177385);
    q.addRz(3, M_PI * 0.0564909955);
    q.addRz(2, M_PI * 0.0564909955);
    q.addRz(1, M_PI * 0.25);
    q.addRz(2, M_PI * -0.25);
    q.addCX(1, 2);
    q.addH(1);
    q.addCX(2, 1);
    q.addRz(1, M_PI * -0.5);
    q.addCX(2, 1);
    q.addRz(1, M_PI * 0.5);
    q.addH(1);
    q.addCX(1, 2);
    q.addRz(1, M_PI * -0.25);
    q.addRz(2, M_PI * 0.25);
    q.addRz(0, M_PI * 0.25);
    q.addRz(1, M_PI * -0.25);
    q.addCX(0, 1);
    q.addH(0);
    q.addCX(1, 0);
    q.addRz(0, M_PI * -0.0255147541);
    q.addCX(1, 0);
    q.addRz(0, M_PI * 0.0255147541);
    q.addH(0);
    q.addCX(0, 1);
    q.addRz(0, M_PI * -0.25);
    q.addRz(1, M_PI * 0.25);
    q.addRz(2, M_PI * 0.25);
    q.addRz(3, M_PI * -0.25);
    q.addCX(2, 3);
    q.addH(2);
    q.addCX(3, 2);
    q.addRz(2, M_PI * 0.0255147541);
    q.addCX(3, 2);
    q.addRz(2, M_PI * -0.0255147541);
    q.addH(2);
    q.addCX(2, 3);
    q.addRz(2, M_PI * -0.25);
    q.addRz(3, M_PI * 0.25);
    q.addSWAP(3, 2);
    q.addSWAP(1, 0);
    q.addSWAP(2, 1);
    q.addSWAP(3, 2);
    q.addSWAP(1, 0);
    q.addSWAP(2, 1);
    c[0] = q.measure(0);
    c[1] = q.measure(1);
    c[2] = q.measure(2);
    c[3] = q.measure(3);
    return;
}
